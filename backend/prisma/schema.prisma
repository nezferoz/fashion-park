// Prisma schema for Fashion Park Inventory System
// All structure and relations are defined here. No manual SQL migration needed.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ================= USER & AUTH =================
model User {
  userId    Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  phone     String?
  address   String?  @db.Text
  role      Role     @default(PELANGGAN)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  transactions        Transaction[]   @relation("CustomerTransactions")
  cashierTransactions Transaction[]   @relation("CashierTransactions")
  stockMovements      StockMovement[]
  cartItems           Cart[]
  passwordResets      PasswordReset[]
  notifications       Notification[]
  refunds             Refund[]        @relation("InitiatedBy")
  approvedRefunds     Refund[]        @relation("ApprovedBy")

  @@map("users")
}

enum Role {
  ADMIN
  KASIR
  PEMILIK
  PELANGGAN
}

model PasswordReset {
  email   String @id
  token   String
  expires BigInt
  user    User   @relation(fields: [email], references: [email])

  @@map("password_resets")
}

// ================= CATEGORY =================
model Category {
  categoryId   Int       @id @default(autoincrement()) @map("category_id")
  categoryName String    @unique @map("category_name")
  description  String?   @db.Text
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  // Relations
  products     Product[]

  @@map("categories")
}

// ================= PRODUCT =================
model Product {
  productId          Int                 @id @default(autoincrement()) @map("product_id")
  productName        String              @map("product_name")
  description        String?             @db.Text
  price              Decimal             @db.Decimal(12, 2)
  imageUrl           String?             @map("image_url")
  isActive           Boolean             @default(true) @map("is_active")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  // Relations
  categoryId         Int?                @map("category_id")
  category           Category?           @relation(fields: [categoryId], references: [categoryId], onDelete: SetNull)
  variants           ProductVariant[]
  images             ProductImage[]
  stockMovements     StockMovement[]
  transactionDetails TransactionDetail[]
  cartItems          Cart[]

  @@map("products")
}

// ================= PRODUCT VARIANT =================
model ProductVariant {
  variantId         Int                 @id @default(autoincrement()) @map("variant_id")
  size              String // Ukuran wajib
  stockQuantity     Int                 @map("stock_quantity")
  barcode           String              @unique // Barcode unik per variant
  sku               String              @unique // SKU unik per variant
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  isActive          Boolean             @default(true) @map("is_active")
  // Relations
  productId         Int                 @map("product_id")
  product           Product             @relation(fields: [productId], references: [productId], onDelete: Cascade)
  cartItems         Cart[]
  TransactionDetail TransactionDetail[]

  @@map("product_variants")
}

// ================= PRODUCT IMAGE =================
model ProductImage {
  imageId   Int      @id @default(autoincrement()) @map("image_id")
  image     Bytes?   @db.LongBlob
  mimeType  String?  @map("mime_type")
  imageUrl  String? // opsional, untuk hybrid
  createdAt DateTime @default(now())
  // Relations
  productId Int      @map("product_id")
  product   Product  @relation(fields: [productId], references: [productId], onDelete: Cascade)

  @@map("product_images")
}

// ================= STOCK MOVEMENT =================
model StockMovement {
  movementId   Int          @id @default(autoincrement()) @map("movement_id")
  movementType MovementType @map("movement_type")
  quantity     Int
  notes        String?      @db.Text
  movementDate DateTime     @default(now()) @map("movement_date")
  createdAt    DateTime     @default(now()) @map("created_at")
  // Relations
  productId    Int?         @map("product_id")
  product      Product?     @relation(fields: [productId], references: [productId], onDelete: SetNull)
  userId       Int?         @map("user_id")
  user         User?        @relation(fields: [userId], references: [userId], onDelete: SetNull)

  @@map("stock_movements")
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
}

// ================= TRANSACTION =================
model Transaction {
  transactionId    Int                 @id @default(autoincrement()) @map("transaction_id")
  transactionCode  String              @map("transaction_code")
  totalAmount      Decimal             @map("total_amount") @db.Decimal(12, 2)
  discount         Decimal?            @default(0) @db.Decimal(12, 2)
  finalAmount      Decimal             @map("final_amount") @db.Decimal(12, 2)
  paymentMethod    PaymentMethod       @map("payment_method")
  paymentStatus    PaymentStatus       @default(PENDING) @map("payment_status")
  status           String              @default("pending") // Order status: pending, processing, shipped, delivered, cancelled
  waybillNumber    String?             @map("waybill_number") // Tracking number for shipping
  courier          String?             // Courier name (JNE, SiCepat, etc.)
  paymentReference String?             @map("payment_reference")
  feeAmount        Decimal?            @map("fee_amount") @db.Decimal(12, 2) // biaya admin Midtrans
  transactionDate  DateTime            @default(now()) @map("transaction_date")
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")
  // Relations
  userId           Int?                @map("user_id")
  user             User?               @relation("CustomerTransactions", fields: [userId], references: [userId], onDelete: SetNull)
  cashierId        Int?                @map("cashier_id")
  cashier          User?               @relation("CashierTransactions", fields: [cashierId], references: [userId], onDelete: SetNull)
  details          TransactionDetail[]
  refunds          Refund[]

  @@map("transactions")
}

model TransactionDetail {
  detailId      Int             @id @default(autoincrement()) @map("detail_id")
  quantity      Int
  unitPrice     Decimal         @map("unit_price") @db.Decimal(12, 2)
  subtotal      Decimal         @db.Decimal(12, 2)
  createdAt     DateTime        @default(now()) @map("created_at")
  // Relations
  transactionId Int             @map("transaction_id")
  transaction   Transaction     @relation(fields: [transactionId], references: [transactionId], onDelete: Cascade)
  productId     Int?            @map("product_id")
  product       Product?        @relation(fields: [productId], references: [productId], onDelete: SetNull)
  variantId     Int?            @map("variant_id")
  variant       ProductVariant? @relation(fields: [variantId], references: [variantId], onDelete: SetNull)

  @@map("transaction_details")
}

model Refund {
  refundId      Int          @id @default(autoincrement()) @map("refund_id")
  reason        String       @db.Text
  status        RefundStatus @default(PENDING)
  amount        Decimal      @db.Decimal(12, 2)
  initiatedAt   DateTime     @default(now()) @map("initiated_at")
  approvedAt    DateTime?    @map("approved_at")
  // Relations
  transactionId Int          @map("transaction_id")
  transaction   Transaction  @relation(fields: [transactionId], references: [transactionId])
  initiatedById Int          @map("initiated_by_id")
  initiatedBy   User         @relation("InitiatedBy", fields: [initiatedById], references: [userId])
  approvedById  Int?         @map("approved_by_id")
  approvedBy    User?        @relation("ApprovedBy", fields: [approvedById], references: [userId])

  @@map("refunds")
}

enum PaymentMethod {
  CASH
  DIGITAL
  QRIS
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum RefundStatus {
  PENDING
  APPROVED
  REJECTED
}

// ================= CART =================
model Cart {
  cartId    Int             @id @default(autoincrement()) @map("cart_id")
  quantity  Int
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")
  // Relations
  userId    Int             @map("user_id")
  user      User            @relation(fields: [userId], references: [userId], onDelete: Cascade)
  productId Int             @map("product_id")
  product   Product         @relation(fields: [productId], references: [productId], onDelete: Cascade)
  variantId Int?            @map("variant_id")
  variant   ProductVariant? @relation(fields: [variantId], references: [variantId])

  @@map("cart")
}

// ================= NOTIFICATION =================
model Notification {
  notificationId Int      @id @default(autoincrement()) @map("notification_id")
  message        String
  type           String   @default("info")
  isRead         Boolean  @default(false) @map("is_read")
  createdAt      DateTime @default(now()) @map("created_at")
  // Relations
  userId         Int      @map("user_id")
  user           User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("notifications")
}

// ================= SYSTEM SETTING =================
model SystemSetting {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

// ================= API KEYS =================
model ApiKey {
  id        Int      @id @default(autoincrement())
  serviceName String @map("service_name")
  apiKey    String  @map("api_key")
  isActive  Boolean @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("api_keys")
}
