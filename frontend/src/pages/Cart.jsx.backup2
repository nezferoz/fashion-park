// 🚨 FORCE UPDATE: 2025-08-14T15:16:23.260Z 🚨
// 🚨 NEW CART.JSX CREATED WITH FORCE UPDATE 🚨
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import Footer from "../components/Footer";
import Navbar from "../components/Navbar";
import api from "../utils/api";
import { getImageUrl } from "../utils/imageUtils";

const Cart = () => {
  console.log("🚨 FORCE UPDATE TEST - Cart component loaded at", new Date().toISOString());
  console.log("🚨 NEW CART.JSX FILE CREATED WITH FORCE UPDATE 🚨");
  
  const [cart, setCart] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [showCheckout, setShowCheckout] = useState(false);
  const [shippingData, setShippingData] = useState({
    name: '',
    phone: '',
    address: '',
    province_id: '',
    city_id: '',
    district_id: '',
    postal_code: ''
  });
  const [provinces, setProvinces] = useState([]);
  const [cities, setCities] = useState([]);
  const [districts, setDistricts] = useState([]);
  const [shippingCost, setShippingCost] = useState(0);
  const [loadingShipping, setLoadingShipping] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (!token) {
      navigate("/login");
      return;
    }
    
    console.log('🚨 FORCE UPDATE: Fetching cart data...');
    api.get("/cart")
      .then(res => {
        console.log('=== CART DATA DEBUG ===');
        console.log('🚨 FORCE UPDATE: Cart data received:', res.data);
        console.log('Cart data length:', res.data.length);
        
        if (res.data.length > 0) {
          console.log('First item details:');
          console.log('  - cart_id:', res.data[0].cart_id);
          console.log('  - product_name:', res.data[0].product_name);
          console.log('  - image_id:', res.data[0].image_id);
          console.log('  - main_image_id:', res.data[0].main_image_id);
          console.log('  - product_id:', res.data[0].product_id);
          console.log('  - variant_id:', res.data[0].variant_id);
          
          // Test getImageUrl function
          const testImageId = res.data[0].image_id || res.data[0].main_image_id;
          if (testImageId) {
            console.log('Testing getImageUrl function:');
            console.log('  - Input image ID:', testImageId);
            console.log('  - Generated URL:', getImageUrl(testImageId));
          } else {
            console.log('❌ NO IMAGE ID FOUND!');
            console.log('  - image_id is:', res.data[0].image_id);
            console.log('  - main_image_id is:', res.data[0].main_image_id);
          }
        } else {
          console.log('❌ Cart is empty!');
        }
        console.log('=== END CART DEBUG ===');
        
        setCart(res.data);
        setLoading(false);
      })
      .catch(err => {
        console.error('Error fetching cart:', err);
        setError("Gagal memuat keranjang");
        setLoading(false);
      });
  }, [navigate]);

  // Load user data and provinces
  useEffect(() => {
    const loadUserData = async () => {
      try {
        const user = JSON.parse(localStorage.getItem("user"));
        if (user) {
          setShippingData(prev => ({
            ...prev,
            name: user.name || "",
            phone: user.phone || "",
            address: user.address || "",
            province_id: user.province_id || "",
            city_id: user.city_id || "",
            district_id: user.district_id || "",
            postal_code: user.postal_code || ""
          }));
        }
        
        // Load provinces
        const provincesRes = await api.get("/rajaongkir/provinces");
        setProvinces(provincesRes.data);
      } catch (err) {
        console.error("Error loading user data:", err);
      }
    };
    loadUserData();
  }, []);

  // Load cities when province changes
  useEffect(() => {
    if (shippingData.province_id) {
      const loadCities = async () => {
        try {
          const citiesRes = await api.get(`/rajaongkir/cities?province_id=${shippingData.province_id}`);
          setCities(citiesRes.data);
          // Reset district when province changes
          setShippingData(prev => ({ ...prev, city_id: "", district_id: "" }));
          setDistricts([]);
        } catch (err) {
          console.error("Error loading cities:", err);
        }
      };
      loadCities();
    }
  }, [shippingData.province_id]);

  // Load districts when city changes
  useEffect(() => {
    if (shippingData.city_id) {
      const loadDistricts = async () => {
        try {
          const districtsRes = await api.get(`/rajaongkir/districts?city_id=${shippingData.city_id}`);
          setDistricts(districtsRes.data);
          // Reset district when city changes
          setShippingData(prev => ({ ...prev, district_id: "" }));
        } catch (err) {
          console.error("Error loading districts:", err);
        }
      };
      loadDistricts();
    }
  }, [shippingData.city_id]);

  const handleShippingChange = (e) => {
    const { name, value } = e.target;
    setShippingData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleQuantityChange = async (cartId, newQuantity) => {
    if (newQuantity < 1) return;
    
    try {
      await api.put(`/cart/${cartId}`, { quantity: newQuantity });
      // Refresh cart data
      const res = await api.get("/cart");
      setCart(res.data);
    } catch (err) {
      console.error("Error updating quantity:", err);
    }
  };

  const removeFromCart = async (cartId) => {
    try {
      await api.delete(`/cart/${cartId}`);
      // Refresh cart data
      const res = await api.get("/cart");
      setCart(res.data);
    } catch (err) {
      console.error("Error removing item:", err);
    }
  };

  const clearCart = async () => {
    try {
      await api.delete("/cart");
      setCart([]);
    } catch (err) {
      console.error("Error clearing cart:", err);
    }
  };

  const calculateTotal = () => {
    return cart.reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  const handleCheckout = () => {
    setShowCheckout(true);
  };

  const handleShippingSubmit = async () => {
    setLoadingShipping(true);
    try {
      // Calculate shipping cost (simplified)
      setShippingCost(15000); // Fixed shipping cost
      setLoadingShipping(false);
    } catch (err) {
      console.error("Error calculating shipping:", err);
      setLoadingShipping(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Memuat keranjang...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <p className="text-red-600 text-lg">{error}</p>
        </div>
      </div>
    );
  }

  if (cart.length === 0) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Navbar />
        <div className="container mx-auto px-4 py-8">
          <div className="text-center">
            <h1 className="text-3xl font-bold text-gray-800 mb-4">Keranjang Belanja</h1>
            <p className="text-gray-600 mb-8">Keranjang belanja Anda kosong</p>
            <button
              onClick={() => navigate("/katalog")}
              className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition"
            >
              Mulai Belanja
            </button>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar />
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold text-gray-800 mb-8">Keranjang Belanja</h1>
        
        <div className="grid lg:grid-cols-3 gap-8">
          {/* Cart Items */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-xl shadow p-6 border border-blue-100">
              <h2 className="text-xl font-semibold mb-6">Item Keranjang</h2>
              
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b border-blue-100">
                      <th className="py-2">Pilih</th>
                      <th className="py-2">Produk</th>
                      <th className="py-2">Jumlah</th>
                      <th className="py-2">Harga</th>
                      <th className="py-2">Total</th>
                      <th className="py-2">Aksi</th>
                    </tr>
                  </thead>
                  <tbody>
                    {cart.map((item) => {
                      console.log(`🚨 FORCE UPDATE: Rendering cart item: ${item.product_name}`, {
                        image_id: item.image_id,
                        main_image_id: item.main_image_id
                      });
                      
                      return (
                        <tr key={item.cart_id} className="border-b border-blue-100 last:border-0 bg-white hover:bg-blue-50 transition">
                          <td className="py-4">
                            <input type="checkbox" className="w-5 h-5 text-blue-600 rounded" />
                          </td>
                          <td className="py-4 flex items-center gap-3">
                            {/* Gambar Produk */}
                            <div className="w-12 h-12 bg-white rounded-lg border-2 border-blue-200 flex items-center justify-center overflow-hidden flex-shrink-0">
                              {(item.image_id || item.main_image_id) ? (
                                <img
                                  src={getImageUrl(item.image_id || item.main_image_id)}
                                  alt={item.product_name}
                                  className="w-full h-full object-cover"
                                  onLoad={() => {
                                    console.log(`🚨 FORCE UPDATE: ✅ Image loaded successfully for product: ${item.product_name}`);
                                  }}
                                  onError={(e) => {
                                    console.log(`🚨 FORCE UPDATE: ❌ Image failed to load for product: ${item.product_name}`);
                                    console.log(`   - image_id: ${item.image_id}`);
                                    console.log(`   - main_image_id: ${item.main_image_id}`);
                                    e.target.style.display = 'none';
                                    e.target.nextSibling.style.display = 'flex';
                                  }}
                                />
                              ) : null}
                              <div className="w-full h-full flex items-center justify-center text-gray-400 text-lg" style={{ display: (item.image_id || item.main_image_id) ? 'none' : 'flex' }}>
                                {item.product_name ? item.product_name.charAt(0).toUpperCase() : '📷'}
                              </div>
                            </div>
                            
                            {/* Informasi Produk */}
                            <div>
                              <span className="font-semibold text-black">{item.product_name}</span>
                              {item.size && <span className="text-sm text-gray-600 block">Ukuran: {item.size}</span>}
                              {/* Debug info - Make it more visible */}
                              <div className="text-xs text-red-500 font-bold bg-yellow-100 p-1 rounded">
                                🚨 FORCE UPDATE: 🔍 DEBUG: img_id={item.image_id || 'NULL'}, main_img_id={item.main_image_id || 'NULL'}
                              </div>
                            </div>
                          </td>
                          <td className="py-4">
                            <div className="flex items-center gap-2">
                              <button
                                onClick={() => handleQuantityChange(item.cart_id, item.quantity - 1)}
                                className="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center hover:bg-gray-300 transition"
                              >
                                -
                              </button>
                              <span className="w-12 text-center">{item.quantity}</span>
                              <button
                                onClick={() => handleQuantityChange(item.cart_id, item.quantity + 1)}
                                className="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center hover:bg-gray-300 transition"
                              >
                                +
                              </button>
                            </div>
                            <div className="text-sm text-gray-500 mt-1">Stok: {item.stock_quantity}</div>
                          </td>
                          <td className="py-4">Rp{item.price.toLocaleString()}</td>
                          <td className="py-4 font-semibold text-blue-600">Rp{(item.price * item.quantity).toLocaleString()}</td>
                          <td className="py-4">
                            <button
                              onClick={() => removeFromCart(item.cart_id)}
                              className="text-red-600 hover:text-red-800 transition"
                            >
                              Hapus
                            </button>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          {/* Checkout Summary */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-xl shadow p-6 border border-blue-100">
              <h3 className="text-lg font-semibold mb-4">Ringkasan Belanja</h3>
              
              {/* Shipping Form */}
              <div className="mb-6">
                <h4 className="font-semibold mb-3">Data Pengiriman</h4>
                <div className="space-y-3">
                  <input
                    type="text"
                    name="name"
                    placeholder="Nama Lengkap"
                    value={shippingData.name}
                    onChange={handleShippingChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                  <input
                    type="text"
                    name="phone"
                    placeholder="Nomor Telepon"
                    value={shippingData.phone}
                    onChange={handleShippingChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                  <textarea
                    name="address"
                    placeholder="Alamat Lengkap"
                    value={shippingData.address}
                    onChange={handleShippingChange}
                    rows="3"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                  <select
                    name="province_id"
                    value={shippingData.province_id}
                    onChange={handleShippingChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Pilih Provinsi</option>
                    {provinces.map(province => (
                      <option key={province.province_id} value={province.province_id}>
                        {province.province}
                      </option>
                    ))}
                  </select>
                  <select
                    name="city_id"
                    value={shippingData.city_id}
                    onChange={handleShippingChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Pilih Kota</option>
                    {cities.map(city => (
                      <option key={city.city_id} value={city.city_id}>
                        {city.city_name}
                      </option>
                    ))}
                  </select>
                  <select
                    name="district_id"
                    value={shippingData.district_id}
                    onChange={handleShippingChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Pilih Kecamatan</option>
                    {districts.map(district => (
                      <option key={district.district_id} value={district.district_id}>
                        {district.district_name}
                      </option>
                    ))}
                  </select>
                  <input
                    type="text"
                    name="postal_code"
                    placeholder="Kode Pos"
                    value={shippingData.postal_code}
                    onChange={handleShippingChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>
              
              {/* Total */}
              <div className="border-t border-gray-200 pt-4 mb-6">
                <div className="flex justify-between items-center mb-2">
                  <span>Subtotal:</span>
                  <span>Rp{calculateTotal().toLocaleString()}</span>
                </div>
                <div className="flex justify-between items-center mb-2">
                  <span>Ongkir:</span>
                  <span>Rp{shippingCost.toLocaleString()}</span>
                </div>
                <div className="flex justify-between items-center font-semibold text-lg">
                  <span>Total:</span>
                  <span className="text-blue-600">Rp{(calculateTotal() + shippingCost).toLocaleString()}</span>
                </div>
              </div>
              
              {/* Buttons */}
              <div className="space-y-3">
                <button
                  onClick={handleCheckout}
                  className="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition font-semibold"
                >
                  Lanjut ke Pembayaran
                </button>
                <button
                  onClick={clearCart}
                  className="w-full bg-red-600 text-white py-3 rounded-lg hover:bg-red-700 transition"
                >
                  Kosongkan Keranjang
                </button>
              </div>
            </div>
          </div>
        </div>
        
        {/* Cart Summary */}
        <div className="mt-8 text-center">
          <p className="text-gray-600">
            Total: <span className="font-semibold text-blue-600">Rp{calculateTotal().toLocaleString()}</span>
          </p>
          <p className="text-sm text-gray-500 mt-2">{cart.length} item di keranjang</p>
        </div>
      </div>
      <Footer />
    </div>
  );
};

export default Cart;